import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

// –≠—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π middleware, –∫–æ—Ç–æ—Ä—ã–π –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
export function middleware(req: NextRequest) {
  // –ú–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ middleware —Å—Ä–∞–±–æ—Ç–∞–ª
  const { pathname } = req.nextUrl;

  const pathnameIsMissingLocale = !/^\/(en|ru|uk)(\/|$)/.test(pathname);

  if (pathnameIsMissingLocale) {
    const acceptLang = req.headers.get("accept-language");
    const browserLang = acceptLang?.split(",")[0].split("-")[0] || "en";
    const redirectLocale = ["en", "ru", "uk"].includes(browserLang)
      ? browserLang
      : "en";

    // üî• –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å, –Ω–æ –±–µ–∑ –ø–æ–¥–º–µ–Ω—ã origin
    const relativeRedirect = `/${redirectLocale}${pathname}`;

    return NextResponse.redirect(new URL(relativeRedirect, req.nextUrl.origin));
  }

  return NextResponse.next();
}

export const config = {
  // Match all pathnames except for
  // - ‚Ä¶ if they start with `/api`, `/trpc`, `/_next` or `/_vercel`
  // - ‚Ä¶ the ones containing a dot (e.g. `favicon.ico`)
  matcher: "/((?!api|trpc|_next|_vercel|.*\\..*).*)",
};
